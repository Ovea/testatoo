MetaInfoProvider !!!

PatternSupport

Add test on keyboard and mouse who test that evaluator is called

Property matcher
https://github.com/geb/geb/blob/master/module/geb-core/src/main/groovy/geb/textmatching/TextMatchingSupport.groovy

choose better then select ?

click_on   link('Link Text') # clicks on either links or buttons
click_on   button('Button Value')
check checbox('A Checkbox')
uncheck checkbox('A Checkbox')

attach_file('Image', '/path/to/image.jpg')
select('Option', :from => 'Select Box')

==============================================================
//        dropdown.should { have label('Elements list') }
//        dropdown.should { have size(5) }

//        dropdown.should { have items('H', 'B', 'Pol', 'Ca', 'Ra') }

//        dropdown.should { have items.containing('Pol', 'Ca') }

//        dropdown.should { have selectedItems('H') }
//        dropdown.items[2].should { be unselected }

//        clickOn dropdown.items[2]

//        dropdown.should { have selectedItems('Pol') }
//        dropdown.items[2].should { be selected }

//        assert dropdown.items.size == 5
//        dropdown.should { have 5.items }

//        dropdown.items[0].should { have value('H') }
//        dropdown.items[1].should { have value('B') }
//        dropdown.items[2].should { have value('Pol') }
//        dropdown.items[3].should { have value('Ca') }
//        dropdown.items[4].should { have value('Ra') }
//
//        clickOn dropdown.items[4]
//
//        dropdown.should { have selectedItems('Ra') }
//        dropdown.items[4].should { be selected }
//
//        clickOn dropdown.item('Ca')
//        dropdown.should { have selectedItems('Ca') }
//
//        dropdown = $('#countries') as Dropdown
//        dropdown.should { be disabled }
//        dropdown.should { have items('Canada', 'France', 'Spain') }
//        dropdown.item('Canada').should { be disabled }
//
//        dropdown = $('#os') as Dropdown
//        dropdown.should { have 8.items }
//        dropdown.should { have items('None', 'Ubuntu', 'Fedora', 'Gentoo', 'XP', 'Vista', 'FreeBSD', 'OpenBSD') }
//
//        dropdown.should { have 3.groupItems }
//        dropdown.should { have groupItems('linux', 'win32', 'BSD') }
//        dropdown.should { have groupItems.containing('linux') }
//
//        GroupItem group = dropdown.groupItems[0]
//        group.should { have value('linux') }
//        group.should { have items('Ubuntu', 'Fedora', 'Gentoo') }
//
//        group = dropdown.groupItem('win32')
//        group.should { have value('win32') }
//        group.should { have items('XP', 'Vista') }
//
//        group = dropdown.groupItem('BSD')
//        group.should { have value('BSD') }
//        group.should { have 2.items }
//
//        group.items[0].should { have value('FreeBSD') }
//        group.item('OpenBSD').should { have value('OpenBSD') }
//
//        assert group.items.size == 2
//
//        group.should { have items('FreeBSD', 'OpenBSD') }

listBox.should { have label('Cities list') }
        listBox.should { have 6.items }
        listBox.should { have items('Montreal', 'Quebec', 'Montpellier', 'New York', 'Casablanca', 'Munich') }

        listBox.should { have selectedItems('New York', 'Munich') }

        listBox.should { have 3.visibleItems }

        listBox.items[0].should { be enabled }
        listBox.item('Quebec').should { be disabled }

        CTRL.click listBox.items[3]
        CTRL.click listBox.items[5]

        CTRL.click listBox.items[0]
        CTRL.click listBox.items[2]

        listBox.should { have selectedItems('Montreal', 'Montpellier') }
        CTRL.click listBox.item('Montreal')
        listBox.should { have selectedItems('Montpellier') }

        on listBox select 'Montreal', 'New York'
        listBox.should { have selectedItems('Montreal', 'Montpellier', 'New York') }

        listBox = $('#planets') as ListBox
        listBox.should { be singleSelectable }

        listBox.should { have groupItems('Cat-1', 'Cat-2') }

        GroupItem group = listBox.groupItems[0]
        group.should { have value('Cat-1') }
        group.should { have 4.items }

        assert group.items.size == 4

        group.should { have items('Mercury', 'Venus', 'Earth', 'Mars') }
        group.items[0].should { have value('Mercury') }

        //        listBox.should { have selectedItems('Montreal', 'Montpellier') }
        //        CTRL.click listBox.item('Montreal')
        //        listBox.should { have selectedItems('Montpellier') }
        //
        //        on listBox select 'Montreal', 'New York'
        //        listBox.should { have selectedItems('Montreal', 'Montpellier', 'New York') }
        //
        //        listBox = $('#planets') as ListBox
        //        listBox.should { be singleSelectable }

//
//        listBox.should { have groupItems('Cat-1', 'Cat-2') }
//
//        GroupItem group = listBox.groupItems[0]
//        group.should { have value('Cat-1') }
//        group.should { have 4.items }
//
//        assert group.items.size == 4
//
//        group.should { have items('Mercury', 'Venus', 'Earth', 'Mars') }
//        group.items[0].should { have value('Mercury') }

 @Test
    public void should_throw_and_error_on_select_multi_items_on_single_selector() {
        throw new RuntimeException()
    }

    @Test
    public void should_throw_and_error_on_unselect_multi_items_on_single_selector() {
        throw new RuntimeException()
    }

=========================================
Doc
    1. Introduction opinionated tool
    2. Design Architecture
    3. Installation
         - Maven
         - Graddle - TODO
    4. First example in JUnit
    5. Interaction with the page and elements
         $  - Finder (css selector)
         $$  - Finder (css selector)
         Mouse
         Keyboard
    6. language DSL
         - Finder through Factory
         - behaviour
         - Actions
            - Mouse
            - Keyboard
         - Intention
    7. Component reference
        state / property / intention
        sample DSL

    8. Create new Component

    9. Html5 Bundle

    10. Cucumber tests

    11. Create a new bundle

    12. hamcrest Matcher
        assertThat(button, is(available))
    13. Junit Syntax
        assert button.available

=========================================