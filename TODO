TODO add MatcherType for State and Property

Add test on Unsupported Operation on Component
add test on Unsu... State on Component

Add test on keyboard and mouse who test tah evaluator is called

Property matcher
https://github.com/geb/geb/blob/master/module/geb-core/src/main/groovy/geb/textmatching/TextMatchingSupport.groovy

evaluate should FAIL if there is no have or be

click_on('Link Text') # clicks on either links or buttons
click_on('Button Value')

choose('A Radio Button')  // choose better then select
check('A Checkbox')
uncheck('A Checkbox')

attach_file('Image', '/path/to/image.jpg')
select('Option', :from => 'Select Box')

==============================================================


//        dropdown.should { have label('Elements list') }
//        dropdown.should { have size(5) }

//        dropdown.should { have items('H', 'B', 'Pol', 'Ca', 'Ra') }

//        dropdown.should { have items.containing('Pol', 'Ca') }

//        dropdown.should { have selectedItems('H') }
//        dropdown.items[2].should { be unselected }

//        clickOn dropdown.items[2]

//        dropdown.should { have selectedItems('Pol') }
//        dropdown.items[2].should { be selected }

//        assert dropdown.items.size == 5
//        dropdown.should { have 5.items }

//        dropdown.items[0].should { have value('H') }
//        dropdown.items[1].should { have value('B') }
//        dropdown.items[2].should { have value('Pol') }
//        dropdown.items[3].should { have value('Ca') }
//        dropdown.items[4].should { have value('Ra') }
//
//        clickOn dropdown.items[4]
//
//        dropdown.should { have selectedItems('Ra') }
//        dropdown.items[4].should { be selected }
//
//        clickOn dropdown.item('Ca')
//        dropdown.should { have selectedItems('Ca') }
//
//        dropdown = $('#countries') as Dropdown
//        dropdown.should { be disabled }
//        dropdown.should { have items('Canada', 'France', 'Spain') }
//        dropdown.item('Canada').should { be disabled }
//
//        dropdown = $('#os') as Dropdown
//        dropdown.should { have 8.items }
//        dropdown.should { have items('None', 'Ubuntu', 'Fedora', 'Gentoo', 'XP', 'Vista', 'FreeBSD', 'OpenBSD') }
//
//        dropdown.should { have 3.groupItems }
//        dropdown.should { have groupItems('linux', 'win32', 'BSD') }
//        dropdown.should { have groupItems.containing('linux') }
//
//        GroupItem group = dropdown.groupItems[0]
//        group.should { have value('linux') }
//        group.should { have items('Ubuntu', 'Fedora', 'Gentoo') }
//
//        group = dropdown.groupItem('win32')
//        group.should { have value('win32') }
//        group.should { have items('XP', 'Vista') }
//
//        group = dropdown.groupItem('BSD')
//        group.should { have value('BSD') }
//        group.should { have 2.items }
//
//        group.items[0].should { have value('FreeBSD') }
//        group.item('OpenBSD').should { have value('OpenBSD') }
//
//        assert group.items.size == 2
//
//        group.should { have items('FreeBSD', 'OpenBSD') }

listBox.should { have label('Cities list') }
        listBox.should { have 6.items }
        listBox.should { have items('Montreal', 'Quebec', 'Montpellier', 'New York', 'Casablanca', 'Munich') }

        listBox.should { have selectedItems('New York', 'Munich') }

        listBox.should { have 3.visibleItems }
        listBox.should { be multiSelectable }

        listBox.items[0].should { be enabled }
        listBox.item('Quebec').should { be disabled }

        CTRL.click listBox.items[3]
        CTRL.click listBox.items[5]

        CTRL.click listBox.items[0]
        CTRL.click listBox.items[2]

        listBox.should { have selectedItems('Montreal', 'Montpellier') }
        CTRL.click listBox.item('Montreal')
        listBox.should { have selectedItems('Montpellier') }

        on listBox select 'Montreal', 'New York'
        listBox.should { have selectedItems('Montreal', 'Montpellier', 'New York') }

        listBox = $('#planets') as ListBox
        listBox.should { be singleSelectable }

        listBox.should { have groupItems('Cat-1', 'Cat-2') }

        GroupItem group = listBox.groupItems[0]
        group.should { have value('Cat-1') }
        group.should { have 4.items }

        assert group.items.size == 4

        group.should { have items('Mercury', 'Venus', 'Earth', 'Mars') }
        group.items[0].should { have value('Mercury') }

        //        listBox.should { have selectedItems('Montreal', 'Montpellier') }
        //        CTRL.click listBox.item('Montreal')
        //        listBox.should { have selectedItems('Montpellier') }
        //
        //        on listBox select 'Montreal', 'New York'
        //        listBox.should { have selectedItems('Montreal', 'Montpellier', 'New York') }
        //
        //        listBox = $('#planets') as ListBox
        //        listBox.should { be singleSelectable }



//
//        listBox.should { have groupItems('Cat-1', 'Cat-2') }
//
//        GroupItem group = listBox.groupItems[0]
//        group.should { have value('Cat-1') }
//        group.should { have 4.items }
//
//        assert group.items.size == 4
//
//        group.should { have items('Mercury', 'Venus', 'Earth', 'Mars') }
//        group.items[0].should { have value('Mercury') }

listView.should { have size(5) }
        assert listView.items.size == 5
        listView.should { have 5.items }

        listView.should { have items('Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5') }
        listView.items[0].should { have value('Item 1') }

        listView.should { have size(5) }
                assert listView.items.size == 5
                listView.should { have 5.items }

                listView.should { have items('Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5') }
                listView.items[0].should { have value('Item 1') }

                 @Test
                    public void should_throw_an_error_when_$_selector_match_multiple_elements() {
                        try {
                            Li item = $('#elements option') as Li;
                            item.visible
                            fail()
                        } catch (ComponentException e) {
                            e.message == "Component defined by jQuery expression \$('#elements option') is not unique: got 5"
                        }
                    }

 @Test
    public void should_throw_and_error_on_select_multi_items_on_single_selector() {
        throw new RuntimeException()
    }

    @Test
    public void should_throw_and_error_on_unselect_multi_items_on_single_selector() {
        throw new RuntimeException()
    }

    @Ignore
    @RunWith(JUnit4)
    class MatcherTest {

        @ClassRule
        public WebDriverConfig driver = new WebDriverConfig()

        @BeforeClass
        public static void before() {
            browser.open 'http://localhost:8080/error.html'
        }

        @Test
        public void equals_to_matcher_on_list_items() {
            Select dropDown = $('#elements') as Select
            try {
                dropDown.should { have items.equalsTo('Val1') }
                fail()
            } catch (ComponentException e) {
                assert e.message == "Expected Items '[Val1]' but was '[Helium, Boron, Polonium, Calcium, Radium]'"
            }

            try {
                dropDown.should { have items.equalsTo(['Val1', 'Val2']) }
                fail()
            } catch (ComponentException e) {
                assert e.message == "Expected Items '[Val1, Val2]' but was '[Helium, Boron, Polonium, Calcium, Radium]'"
            }
        }

        @Test
        public void equals_to_matcher() {
            Select dropDown = $('#elements') as Select
            try {
                dropDown.items[0].should { have value.equalsTo('Val_1') }
                fail()
            } catch (ComponentException e) {
                assert e.message == "Expected Value 'Val_1' but was 'Helium'"
            }

            try {
                dropDown.items[0].should { have value.equalsTo('Val_1', 'val_2') }
                fail()
            } catch (ComponentException e) {
                assert e.message == "Expected one of Value '[Val_1, val_2]' but was 'Helium'"
            }
        }

        @Test
        public void containing_matcher() {
            Select dropDown = $('#elements') as Select
            try {
                dropDown.should { have items.containing('Val_1') }
                fail()
            } catch (ComponentException e) {
                assert e.message == "Expected Items containing 'Val_1' but was '[Helium, Boron, Polonium, Calcium, Radium]'"
            }

            try {
                dropDown.should { have items.containing('Val_1', 'Val_2') }
                fail()
            } catch (ComponentException e) {
                assert e.message == "Expected one of Items containing '[Val_1, Val_2]' but was '[Helium, Boron, Polonium, Calcium, Radium]'"
            }
        }
    }


=========================================
Doc

    1. Introduction
    2. Why Testatoo?
    3. Technologies
    4. Installation

    5. Components
        Component abstraction is provided by Testatoo

                State       properties
        Radio  enabled
               disabled



    6. Usage
        Test state
        Evaluate les property
        Actions

    6. DSL
        button.should { be available }
        Action

        Input
            clickOn(checkbox)
        Action / Intention
            check checkbox =>

    7. hamcrest Matcher
        assertThat(button, is(available))
    8. Junit Syntax
        assert button.available


    6. Bundles
        Default Bundle

=========================================

Do two little TodoMVC
Aurelia => aurelia bootstrap
Angular1 => angular material