======== COMPONENTS ==========
				Article
				Aside
                Button
				Checkbox
				Footer
				Form
				Header
				Heading
                Image
				Link
				Panel
                Paragraph
				Radio
				Section
				DataGrid
				DataGrid.Cell
				DataGrid.Column
				DataGrid.Row

                DropDown
GroupItem
Item

ListBox
ListView

				ColorField
				DateField
				DateTimeField
				EmailField
				MonthField
				NumberField
				PasswordField
				PhoneField
				RangeField
				SearchField
				TextField
				TimeField
				URLField
				WeekField

======== PROPERTIES ==========
			ArticleSize
            ColumnSize
            GroupItems
            GroupItemsSize
            Items
			Label
			Maximum
			Minimum
            ParagraphSize
			Pattern
			Placeholder
			Reference
SelectedItems
            Size
            Source
			Step
			Text
			Title
			Value
VisibleItemsSize

======== STATES ==========
			Available
			Checked
			Disabled
			Empty
			Enabled
			Filled
			Hidden
			InRange
			Invalid
			Missing
			MultiSelectable
			Optional
			OutOfRange
			ReadOnly
			Required
			Selected
			SingleSelectable
			Unchecked
			Unselected
			Valid
			Visible


// MultiSelectable getSelectedItems()
// SingleSelectable getSelectedItem()

MOVE ALL ACTION IN THE DSL just keep MOUSE on Component == LOW LEVEL
// TODO David move to DLS
//    void check() {
//        if (unchecked)
//            new MouseClick().execute(this)
//        else
//            throw new ComponentException("${this.class.simpleName} ${this} is already checked and cannot be checked")
//    }

// TODO David move to DLS
    void select(Item item) {
    }

    //    Form() {
    //        support Reset, Submit
    //    }





//        EmailField email_field = $('#form [type=email]') as EmailField
//        PasswordField password_field = $('#form [type=password]') as PasswordField
//
//        Button submit_button = $('#form [type=submit]') as Button
//        Button reset_button = $('#form [type=reset]') as Button
//
//        Message message = $('#form .alert') as Message

        // Can submit a form
//        message.should { have title('The form was submitted 0 time(s)') }
//        message.should { have title.containing('The form was submitted') }

//        clickOn submit_button
//        message.should { have title('The form was submitted 1 time(s)') }

//        clickOn submit_button
//        message.should { have title('The form was submitted 2 time(s)') }

        // Can reset a form
//        clickOn email_field
//        type 'my@email.org'
//        clickOn password_field
//        type 'password'

        // By clicking on the button
//        email_field.should { have value('my@email.org') }
//        password_field.should { have value('password') }

//        clickOn reset_button

//        email_field.should { have value('') }
//        password_field.should { have value('') }

//        form.should { be valid }
        // Field in error
//        clickOn email_field
//        type 'bad email'
//        clickOn submit_button

//        email_field.should { be invalid }
//        form.should { be invalid }

//        clear email_field

//        clickOn email_field
//        type 'y@email.org'
//        clickOn submit_button
//        email_field.should { be valid }
//        form.should { be valid }

 @ByCss('div')
    class Message extends Panel {
        Message() {
            support Title, "it.text()"
        }
    }

    data_grid.should { be enabled }
            data_grid.should { be visible }

            data_grid.should { have 4.columns }


//        dropdown.should { be enabled }
//        dropdown.should { be visible }

//        dropdown.should { have label('Elements list') }
//        dropdown.should { have size(5) }

//        dropdown.should { have items('H', 'B', 'Pol', 'Ca', 'Ra') }

//        dropdown.should { have items.containing('Pol', 'Ca') }

//        dropdown.should { have selectedItems('H') }
//        dropdown.items[2].should { be unselected }

//        clickOn dropdown.items[2]

//        dropdown.should { have selectedItems('Pol') }
//        dropdown.items[2].should { be selected }

//        assert dropdown.items.size == 5
//        dropdown.should { have 5.items }

//        dropdown.items[0].should { have value('H') }
//        dropdown.items[1].should { have value('B') }
//        dropdown.items[2].should { have value('Pol') }
//        dropdown.items[3].should { have value('Ca') }
//        dropdown.items[4].should { have value('Ra') }
//
//        clickOn dropdown.items[4]
//
//        dropdown.should { have selectedItems('Ra') }
//        dropdown.items[4].should { be selected }
//
//        clickOn dropdown.item('Ca')
//        dropdown.should { have selectedItems('Ca') }
//
//        dropdown = $('#countries') as Dropdown
//        dropdown.should { be disabled }
//        dropdown.should { have items('Canada', 'France', 'Spain') }
//        dropdown.item('Canada').should { be disabled }
//
//        dropdown = $('#os') as Dropdown
//        dropdown.should { have 8.items }
//        dropdown.should { have items('None', 'Ubuntu', 'Fedora', 'Gentoo', 'XP', 'Vista', 'FreeBSD', 'OpenBSD') }
//
//        dropdown.should { have 3.groupItems }
//        dropdown.should { have groupItems('linux', 'win32', 'BSD') }
//        dropdown.should { have groupItems.containing('linux') }
//
//        GroupItem group = dropdown.groupItems[0]
//        group.should { have value('linux') }
//        group.should { have items('Ubuntu', 'Fedora', 'Gentoo') }
//
//        group = dropdown.groupItem('win32')
//        group.should { have value('win32') }
//        group.should { have items('XP', 'Vista') }
//
//        group = dropdown.groupItem('BSD')
//        group.should { have value('BSD') }
//        group.should { have 2.items }
//
//        group.items[0].should { have value('FreeBSD') }
//        group.item('OpenBSD').should { have value('OpenBSD') }
//
//        assert group.items.size == 2
//
//        group.should { have items('FreeBSD', 'OpenBSD') }

listBox.should { have label('Cities list') }
        listBox.should { have 6.items }
        listBox.should { have items('Montreal', 'Quebec', 'Montpellier', 'New York', 'Casablanca', 'Munich') }

        listBox.should { have selectedItems('New York', 'Munich') }

        listBox.should { have 3.visibleItems }
        listBox.should { be multiSelectable }

        listBox.items[0].should { be enabled }
        listBox.item('Quebec').should { be disabled }

        CTRL.click listBox.items[3]
        CTRL.click listBox.items[5]

        CTRL.click listBox.items[0]
        CTRL.click listBox.items[2]

        listBox.should { have selectedItems('Montreal', 'Montpellier') }
        CTRL.click listBox.item('Montreal')
        listBox.should { have selectedItems('Montpellier') }

        on listBox select 'Montreal', 'New York'
        listBox.should { have selectedItems('Montreal', 'Montpellier', 'New York') }

        listBox = $('#planets') as ListBox
        listBox.should { be singleSelectable }

        listBox.should { have groupItems('Cat-1', 'Cat-2') }

        GroupItem group = listBox.groupItems[0]
        group.should { have value('Cat-1') }
        group.should { have 4.items }

        assert group.items.size == 4

        group.should { have items('Mercury', 'Venus', 'Earth', 'Mars') }
        group.items[0].should { have value('Mercury') }

        //        listBox.should { have selectedItems('Montreal', 'Montpellier') }
        //        CTRL.click listBox.item('Montreal')
        //        listBox.should { have selectedItems('Montpellier') }
        //
        //        on listBox select 'Montreal', 'New York'
        //        listBox.should { have selectedItems('Montreal', 'Montpellier', 'New York') }
        //
        //        listBox = $('#planets') as ListBox
        //        listBox.should { be singleSelectable }



//
//        listBox.should { have groupItems('Cat-1', 'Cat-2') }
//
//        GroupItem group = listBox.groupItems[0]
//        group.should { have value('Cat-1') }
//        group.should { have 4.items }
//
//        assert group.items.size == 4
//
//        group.should { have items('Mercury', 'Venus', 'Earth', 'Mars') }
//        group.items[0].should { have value('Mercury') }

listView.should { have size(5) }
        assert listView.items.size == 5
        listView.should { have 5.items }

        listView.should { have items('Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5') }
        listView.items[0].should { have value('Item 1') }

        listView.should { have size(5) }
                assert listView.items.size == 5
                listView.should { have 5.items }

                listView.should { have items('Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5') }
                listView.items[0].should { have value('Item 1') }